select(cluster_kmeans, contains("_mean")) %>%
pivot_longer(cols = gmsi_score_mean:World_mean, names_to = "variable", values_to = "mean")
data_summary_se = data_summary %>%
select(cluster_kmeans, contains("_se")) %>%
pivot_longer(cols = gmsi_score_se:World_se, names_to = "variable", values_to = "se")
data_summary_mean$se = data_summary_se$se
# plot
ggplot(data_summary_mean, aes(x = cluster_kmeans, y = mean, fill = cluster_kmeans)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "Group", y = "Mean Value", fill = "cluster")
data_clean
################################################################################
# Linear mixed-effect model
################################################################################
## Linear models
model1 = lm(answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
library(lme4)
library(lmerTest)
library(ggplot2)
# add stimuli as a random effect?
mixed.lmer = lmer(answer ~ age + (1|participant_id), data = data_clean)
summary(mixed.lmer)
anova(mixed.lmer)
summary(mixed.lmer)
summary.lm(mixed.lmer)
summary.lm(mixed.lmer)
summary(mixed.lmer)
data_clean
data_clean = read_csv("~/Documents/github/2023-static-audio/data/melf0_pref1/data_clean.csv")
################################################################################
# imports
################################################################################
library(tidyverse)
source("utils.R") # functions for analysis and visualization
data_clean = read_csv("~/Documents/github/2023-static-audio/data/melf0_pref1/data_clean.csv")
library(tidyverse)
library(misty) #for reverse scoring items
# study 2: synth f0
ratings_data = read_csv("~/Documents/github/2023-static-audio/data/melf0_pref1/anonymous/data/RatingTrial.csv")
# study 2: synth f0
ratings_data = read_csv("~/Documents/github/2023-static-audio/data/melf0_pref1/anonymous/data/RatingTrial.csv")
# study 2: synth f0
ratings_data = read_csv("~/github/2023-static-audio/data/melf0_pref1/anonymous/data/RatingTrial.csv")
root_path = "/Users/manu/Library/CloudStorage/OneDrive-GoldsmithsCollege/Documents/github/"
root_path
paste(root_path, "2023-static-audio/data/melf0_pref1/anonymous/data/RatingTrial.csv")
# study 2: synth f0
ratings_data = read_csv(paste0(root_path, "2023-static-audio/data/melf0_pref1/anonymous/data/RatingTrial.csv"))
ratings_data
participant_data = read_csv(paste0(root_path, "2023-static-audio/data/melf0_pref1/anonymous/data/Participant.csv"))
response_data = read_csv(paste0(root_path, "github/2023-static-audio/data/melf0_pref1/anonymous/data/Response.csv"))
response_data = read_csv(paste0(root_path, "2023-static-audio/data/melf0_pref1/anonymous/data/Response.csv"))
ratings_data_clean = ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(ratings_data_clean$participant_id))
ratings_data_clean
ratings_data
atings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE")
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE")
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer)
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n())
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer))
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 38)
ratings_data_clean = ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 38)
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$audio_name))
table(ratings_data_clean$audio_name)
ratings_data_clean
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer)
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+"))))
ratings_data_clean = ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer)
View(ratings_data_clean)
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = str_extract(json_str, '(?<="audio_name": ")[^"]+'))
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = str_extract(audio_name, '(?<="audio_name": ")[^"]+'))
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = str_extract(json_str, '(?<="audio_name": ")[^"]+'),
audio_name = str_remove(audio_name, "\\.wav$"))
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = str_extract(audio_name, '(?<="audio_name": ")[^"]+'),
audio_name = str_remove(audio_name, "\\.wav$"))
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer)
ratings_data
ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer)
ratings_data_clean = ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 38)
ratings_data_clean
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$audio_name))
ratings_data_clean
ratings_data_clean = ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 38) %>%
select(-definition)
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$audio_name))
ratings_data_clean
root_path
row.names=FALSE))
row.names=FALSE)
write.csv(ratings_data_clean,
read_csv(paste0(
root_path,"2023-static-audio/data/melf0_pref1/ratings_data_clean.csv"),
row.names=FALSE))
write.csv(ratings_data_clean,
paste0(root_path,"2023-static-audio/data/melf0_pref1/ratings_data_clean.csv"),
row.names=FALSE
)
# participants data
participant_data_clean = participant_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(progress > 0.85) %>%  # filter out participants who failed
select(id, gender, age, gmsi, complete) %>%
rename(participant_id = id) %>%
mutate(gmsi_mt = as.numeric(str_extract(str_extract(str_extract(gmsi, '"Musical Training": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_12 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_12": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_2 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_02": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_16 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_16": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_18 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_18": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_21 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_21": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_22 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_22": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_35 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_35": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
mutate(gmsi_score = rowMeans(cbind(gmsi_12, gmsi_2, gmsi_16, gmsi_18, gmsi_21, gmsi_22, gmsi_35))) %>%
select(-gmsi, -gmsi_12, -gmsi_2, -gmsi_16, -gmsi_18,-gmsi_21, -gmsi_22, -gmsi_35)
# survey data
response_data_clean = response_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(successful_validation == TRUE) %>%  # filter out participants who failed
select(participant_id, question, answer)
# personality
tipi_data = response_data_clean %>%
filter(str_detect(question, 'tipi')) %>%
mutate(extraverted = as.numeric(str_extract(str_extract(str_extract(answer, '"Extraverted": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(critical = as.numeric(str_extract(str_extract(str_extract(answer, '"Critical": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(dependable = as.numeric(str_extract(str_extract(str_extract(answer, '"Dependable": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(anxious = as.numeric(str_extract(str_extract(str_extract(answer, '"Anxious": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(open = as.numeric(str_extract(str_extract(str_extract(answer, '"Open": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(reserved = as.numeric(str_extract(str_extract(str_extract(answer, '"Reserved": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(sympathetic = as.numeric(str_extract(str_extract(str_extract(answer, '"Sympathetic": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(disorganized = as.numeric(str_extract(str_extract(str_extract(answer, '"Disorganized": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(calm = as.numeric(str_extract(str_extract(str_extract(answer, '"Calm": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(conventional = as.numeric(str_extract(str_extract(str_extract(answer, '"Conventional": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(reserved_r = item.reverse(reserved, min = 1, max = 7)) %>%
mutate(conventional_r = item.reverse(conventional, min = 1, max = 7)) %>%
mutate(critical_r = item.reverse(critical, min = 1, max = 7)) %>%
mutate(calm_r = item.reverse(calm, min = 1, max = 7)) %>%
mutate(disorganized_r = item.reverse(disorganized, min = 1, max = 7)) %>%
group_by(participant_id) %>%
mutate(extraversion = mean(c(extraverted, reserved_r))) %>%
mutate(openness = mean(c(open, conventional_r))) %>%
mutate(agreeableness = mean(c(sympathetic, critical_r))) %>%
mutate(neuroticism = mean(c(anxious, calm_r))) %>%
mutate(conscientiousness = mean(c(dependable, disorganized_r))) %>%
select(participant_id, extraversion, agreeableness, neuroticism, conscientiousness, openness)
data_participant_combined = left_join(participant_data_clean, tipi_data, by = c("participant_id" = "participant_id"))
# music preferences
stompr_data = response_data_clean %>%
filter(str_detect(question, 'stompr')) %>%
mutate(Alternative = as.numeric(str_extract(str_extract(str_extract(answer, '"Alternative": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Bluegrass = as.numeric(str_extract(str_extract(str_extract(answer, '"Bluegrass": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Blues = as.numeric(str_extract(str_extract(str_extract(answer, '"Blues": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Classical = as.numeric(str_extract(str_extract(str_extract(answer, '"Classical": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Country = as.numeric(str_extract(str_extract(str_extract(answer, '"Country": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Dance_Electronica = as.numeric(str_extract(str_extract(str_extract(answer, '"Dance/Electronica": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Folk = as.numeric(str_extract(str_extract(str_extract(answer, '"Folk": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Funk = as.numeric(str_extract(str_extract(str_extract(answer, '"Funk": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Gospel = as.numeric(str_extract(str_extract(str_extract(answer, '"Gospel": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Heavy_Metal = as.numeric(str_extract(str_extract(str_extract(answer, '"Heavy Metal": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(World = as.numeric(str_extract(str_extract(str_extract(answer, '"World": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Jazz = as.numeric(str_extract(str_extract(str_extract(answer, '"Jazz": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(New_Age = as.numeric(str_extract(str_extract(str_extract(answer, '"New Age": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Oldies = as.numeric(str_extract(str_extract(str_extract(answer, '"Oldies": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Opera = as.numeric(str_extract(str_extract(str_extract(answer, '"Opera": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Pop = as.numeric(str_extract(str_extract(str_extract(answer, '"Pop": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Punk = as.numeric(str_extract(str_extract(str_extract(answer, '"Punk": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Rap_hip_hop = as.numeric(str_extract(str_extract(str_extract(answer, '"Rap/hip-hop": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Reggae = as.numeric(str_extract(str_extract(str_extract(answer, '"Reggae": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Religious = as.numeric(str_extract(str_extract(str_extract(answer, '"Religious": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Rock = as.numeric(str_extract(str_extract(str_extract(answer, '"Rock": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Soul_R_B = as.numeric(str_extract(str_extract(str_extract(answer, '"Soul/R&B": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Soundtracks_theme_song = as.numeric(str_extract(str_extract(str_extract(answer, '"Soundtracks/theme song": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
# Score 4 dimenions
mutate(RefCom = mean(c(Bluegrass, Blues, Classical, Folk, World, Jazz, New_Age, Opera))) %>%
mutate(IntReb = mean(c(Alternative, Heavy_Metal, Punk, Rock))) %>%
mutate(UpbConv = mean(c(Country, Gospel, Oldies, Pop, Religious, Soundtracks_theme_song))) %>%
mutate(EneRhy = mean(c(Dance_Electronica, Funk, Rap_hip_hop, Reggae, Soul_R_B))) %>%
# Score 5 dimensions
mutate(mellow = mean(c(Dance_Electronica, World, New_Age))) %>%
mutate(unpretentious = mean(c(Pop, Country, Religious))) %>%
mutate(sophisticated = mean(c(Blues, Jazz, Bluegrass, Folk, Classical, Gospel, Opera))) %>%
mutate(intense = mean(c(Rock, Punk, Alternative, Heavy_Metal))) %>%
mutate(contemporary = mean(c(Rap_hip_hop, Soul_R_B, Funk, Reggae))) %>%
select(participant_id, RefCom:EneRhy, World)
data_participant_combined = left_join(data_participant_combined, stompr_data, by = "participant_id")
# flow
DFS_data = response_data_clean %>%
filter(str_detect(question, 'DFS')) %>%
mutate(Challenge_skill1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Loss_of_self1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Loss_of_self1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Challenge_skill2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Challenge_skill3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Challenge_skill4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
mutate(Challenge_skill = mean(c(Challenge_skill1, Challenge_skill2, Challenge_skill3, Challenge_skill4))) %>%
mutate(Action_awareness = mean(c(Action_awareness1, Action_awareness2, Action_awareness3, Action_awareness4))) %>%
mutate(Clear_goals = mean(c(Clear_goals1, Clear_goals2, Clear_goals3, Clear_goals4))) %>%
mutate(Unambiguous_feedback = mean(c(Unambiguous_feedback1, Unambiguous_feedback2, Unambiguous_feedback3, Unambiguous_feedback4))) %>%
mutate(Task_concentration = mean(c(Task_concentration1, Task_concentration2, Task_concentration3, Task_concentration4))) %>%
mutate(Sense_of_control = mean(c(Sense_of_control1, Sense_of_control2, Sense_of_control3, Sense_of_control4))) %>%
mutate(Transformation_of_time = mean(c(Transformation_of_time1, Transformation_of_time2, Transformation_of_time3, Transformation_of_time4))) %>%
mutate(Autotelic_experience = mean(c(Autotelic_experience1, Autotelic_experience2, Autotelic_experience3, Autotelic_experience4))) %>%
mutate(DFS_all_score = mean(c(Challenge_skill, Action_awareness, Clear_goals, Unambiguous_feedback, Task_concentration, Sense_of_control, Transformation_of_time, Autotelic_experience))) %>%
select(participant_id, Challenge_skill, Action_awareness, Clear_goals, Unambiguous_feedback, Task_concentration, Sense_of_control, Transformation_of_time, Autotelic_experience, DFS_all_score)
data_participant_combined = left_join(data_participant_combined, DFS_data, by = "participant_id")
# participants
write.csv(data_participant_combined, "~/Documents/github/2023-static-audio/data/mel_pref1/participants_data_clean.csv", row.names=FALSE)
data_participant_combined
# participants
write.csv(data_participant_combined,
paste0(root_path,"2023-static-audio/data/melf0_pref1/participants_data_clean.csv"),
row.names=FALSE
)
# participants + ratings
data_combined = left_join(ratings_data_clean, data_participant_combined, by = "participant_id")
data_combined
write.csv(data_combined,
paste0(root_path,"2023-static-audio/data/melf0_pref1/data_clean.csv"),
row.names=FALSE
)
data_clean = read_csv("~/Documents/github/2023-static-audio/data/melf0_pref1/data_clean.csv")
data_clean = read_csv(paste0(root_path, "2023-static-audio/data/melf0_pref1/data_clean.csv"))
data_clean
data_pids = read_csv(paste0(root_path, "2023-static-audio/data/melf0_pref1/participants_data_clean.csv"))
# N participants
length(table(data_clean$participant_id)) # 80
# N stimuli
length(table(data_clean$audio_name)) # 40
data_clean$audio_name = factor(data_clean$audio_name)
data_clean
################################################################################
# Diversity of music ratings
################################################################################
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
ggsave("plots/song_ratings_mainf0.png", height = 10, width = 20, units = "cm")
################################################################################
# Correlations of individual differences
################################################################################
library(corrplot)
library(data.table)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
#converting gender to numeric variable
data_clean$gender <- case_when(
data_clean$gender == "female" ~ 1,
data_clean$gender == "male" ~ 2,
data_clean$gender == "non_binary" ~ 3
)
# only one set of participant's individual differences variables per participant
data_cor <- data_clean %>%
ungroup() %>%
arrange(participant_id)
data_cor <- subset(data_cor, !duplicated(subset(data_cor, select=c(participant_id, gender))))
#selecting for correlation variables
data_cor <- data_cor %>%
select(age, gender, gmsi_score, openness, extraversion, agreeableness, neuroticism, conscientiousness, mellow, unpretentious, sophisticated, intense, contemporary, Challenge_skill, Action_awareness, Clear_goals, Unambiguous_feedback, Task_concentration, Sense_of_control, Transformation_of_time, Autotelic_experience, DFS_all_score) %>%
mutate_all(as.numeric)
res1 <- cor.mtest(data_cor[, c(1:22)], conf.level = .95)
testRes = cor.mtest(data_cor[, c(1:22)], conf.level = 0.95)
png("plots/correlation_plot.png", width = 800, height = 800) # Adjust width and height as needed
corrplot(cor(data_cor, use="complete.obs"),
method="color",
type="upper",
p.mat = res1$p,
insig = "label_sig",
sig.level = .05,
#pch.cex = 0.8,
#pch.col = "black",
tl.pos = "td",
tl.col="black",
tl.cex=0.8,
tl.srt=50,
#addCoef.col = "black",
outline=TRUE,
diag = FALSE,
)
################################################################################
# Diversity of music ratings
################################################################################
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
data_clean
data_clean %>%
separate(audio_name, c("audio_name", "f0"), sep = "_")
data_clean %>%
separate(audio_name, c("audio_name", "f0"), sep = "-")
data_clean %>%
separate(audio_name, c("noise", "name"), sep = "-")
data_clean %>%
separate(audio_name, c("noise", "name"), sep = "-") %>%
select(-name)
data_clean %>%
separate(audio_name, c("noise", "name"), sep = "-") %>%
select(-noise) %>%
separate(name, c("noise", "name"), sep = "_")
data_clean %>%
separate(audio_name, c("noise", "name"), sep = "-") %>%
select(-noise) %>%
separate(name, c("name", "noise"), sep = "_") %>%
select(-noise)
data_clean %>%
separate(audio_name, c("noise", "name"), sep = "-") %>%
select(-noise) %>%
separate(name, c("name", "noise"), sep = "_") %>%
select(-noise) %>%
mutate(audio_name = as.numeric(name))
data_clean %>%
separate(audio_name, c("noise", "audio_name"), sep = "-") %>%
select(-noise) %>%
separate(audio_name, c("audio_name", "noise"), sep = "_") %>%
select(-noise) %>%
mutate(audio_name = as.numeric(audio_name))
data_clean = data_clean %>%
separate(audio_name, c("noise", "audio_name"), sep = "-") %>%
select(-noise) %>%
separate(audio_name, c("audio_name", "noise"), sep = "_") %>%
select(-noise) %>%
mutate(audio_name = as.numeric(audio_name))
data_clean$audio_name = factor(data_clean$audio_name)
data_clean
################################################################################
# Diversity of music ratings
################################################################################
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
ggsave("plots/song_ratings_mainf0.png", height = 10, width = 20, units = "cm")

group_by(cluster) %>%
summarise(n = n(),
mean_gold = mean(gmsi_score, na.rm = T),
sd_gold = sd(gmsi_score, na.rm = T),
mean_age = mean(age, na.rm = T),
sd_age = mean(age, na.rm = T))
Plot dendrogram with different cut heights and highlight six clusters with distinct colors
# Plot dendrogram with different cut heights and highlight six clusters with distinct colors
png("plots/plot_dendrogram_UA_gov.confidence.png", height = 14, width = 14, units = "cm", res = 300)
plot(hc_res, hang = -1, cex = 0.6,
main = "Dendrogram UKRAINE - HCLUST", xlab = "Cities", sub = "",
labels = wvs_merged_data$city_name)
plot(hc_res, hang = -1, cex = 0.6,
main = "Dendrogram - Hierarchical Clustering", xlab = "Cities", sub = "",
labels = data_to_clust$participant_id)
dev.off()
# Plot dendrogram with different cut heights and highlight six clusters with distinct colors
png("plots/plot_dendrogram_UA_gov.confidence.png", height = 14, width = 14, units = "cm", res = 300)
plot(hc_res, hang = -1, cex = 0.6,
main = "Dendrogram - Hierarchical Clustering", xlab = "Cities", sub = "",
labels = data_to_clust$participant_id)
rect.hclust(hc_res, k = k, border = cluster_colors[1:k])  # Highlight six clusters with distinct colors
dev.off()
# clustering + individual differences
data_combined_long = merge(x = data_to_clust, y = participant_data_clean, by = "participant_id", all = TRUE)
data_combined = tibble(data_combined_long[,-3:-42]) %>% drop_na()
data_combined %>%
group_by(cluster) %>%
summarise(n = n(),
mean_gold = mean(gmsi_score, na.rm = T),
sd_gold = sd(gmsi_score, na.rm = T),
mean_age = mean(age, na.rm = T),
sd_age = mean(age, na.rm = T))
library(tidyverse)
# data_clean.csv dataframe saved in prepare-data.R
data_clean = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/data_clean.csv")
# N stimuli
length(table(data_clean$audio_name)) # 40
# data_clean.csv dataframe saved in prepare-data.R
data_clean = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/data_clean.csv")
library(tidyverse)
library(misty) #for reverse scoring items
library(misty) #for reverse scoring items
ratings_data = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/RatingTrial.csv")
participant_data = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/Participant.csv")
response_data = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/Response.csv")
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$audio_name))
ggplot(ratings_data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
participant_data_clean = participant_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
select(id, gender, age, gmsi) %>%
rename(participant_id = id) %>%
mutate(gmsi_12 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_12": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_2 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_02": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_16 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_16": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_18 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_18": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_21 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_21": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_22 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_22": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
mutate(gmsi_35 = as.numeric(str_extract(str_extract(str_extract(gmsi, '"q_35": [0-9]'), ': [0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
mutate(gmsi_score = rowMeans(cbind(gmsi_12, gmsi_2, gmsi_16, gmsi_18, gmsi_21, gmsi_22, gmsi_35))) %>%
select(-gmsi)
data_combined = merge(x = participant_data_clean, y = ratings_data_clean, by = "participant_id", all = TRUE)
response_data_clean = response_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
select(participant_id, question, answer)
tipi_data = response_data_clean %>%
filter(str_detect(question, 'tipi')) %>%
mutate(extraverted = as.numeric(str_extract(str_extract(str_extract(answer, '"Extraverted": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(critical = as.numeric(str_extract(str_extract(str_extract(answer, '"Critical": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(dependable = as.numeric(str_extract(str_extract(str_extract(answer, '"Dependable": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(anxious = as.numeric(str_extract(str_extract(str_extract(answer, '"Anxious": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(open = as.numeric(str_extract(str_extract(str_extract(answer, '"Open": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(reserved = as.numeric(str_extract(str_extract(str_extract(answer, '"Reserved": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(sympathetic = as.numeric(str_extract(str_extract(str_extract(answer, '"Sympathetic": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(disorganized = as.numeric(str_extract(str_extract(str_extract(answer, '"Disorganized": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(calm = as.numeric(str_extract(str_extract(str_extract(answer, '"Calm": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(conventional = as.numeric(str_extract(str_extract(str_extract(answer, '"Conventional": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
mutate(reserved_r = item.reverse(reserved, min = 1, max = 7)) %>%
mutate(conventional_r = item.reverse(conventional, min = 1, max = 7)) %>%
mutate(critical_r = item.reverse(critical, min = 1, max = 7)) %>%
mutate(calm_r = item.reverse(calm, min = 1, max = 7)) %>%
mutate(disorganized_r = item.reverse(disorganized, min = 1, max = 7)) %>%
mutate(extraversion = mean(c(extraverted, reserved_r))) %>%
mutate(openness = mean(c(open, conventional_r))) %>%
mutate(agreeableness = mean(c(sympathetic, critical_r))) %>%
mutate(neuroticism = mean(c(anxious, calm))) %>%
mutate(conscientiousness = mean(c(dependable, disorganized))) %>%
select(participant_id, extraversion, agreeableness, neuroticism, conscientiousness, openness)
data_combined = merge(x = data_combined, y = tipi_data, by = "participant_id", all = TRUE)
stompr_data = response_data_clean %>%
filter(str_detect(question, 'stompr')) %>%
mutate(Alternative = as.numeric(str_extract(str_extract(str_extract(answer, '"Alternative": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Bluegrass = as.numeric(str_extract(str_extract(str_extract(answer, '"Bluegrass": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Blues = as.numeric(str_extract(str_extract(str_extract(answer, '"Blues": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Classical = as.numeric(str_extract(str_extract(str_extract(answer, '"Classical": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Country = as.numeric(str_extract(str_extract(str_extract(answer, '"Country": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Dance_Electronica = as.numeric(str_extract(str_extract(str_extract(answer, '"Dance/Electronica": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Folk = as.numeric(str_extract(str_extract(str_extract(answer, '"Folk": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Funk = as.numeric(str_extract(str_extract(str_extract(answer, '"Funk": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Gospel = as.numeric(str_extract(str_extract(str_extract(answer, '"Gospel": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Heavy_Metal = as.numeric(str_extract(str_extract(str_extract(answer, '"Heavy Metal": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(World = as.numeric(str_extract(str_extract(str_extract(answer, '"World": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Jazz = as.numeric(str_extract(str_extract(str_extract(answer, '"Jazz": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(New_Age = as.numeric(str_extract(str_extract(str_extract(answer, '"New Age": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Oldies = as.numeric(str_extract(str_extract(str_extract(answer, '"Oldies": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Opera = as.numeric(str_extract(str_extract(str_extract(answer, '"Opera": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Pop = as.numeric(str_extract(str_extract(str_extract(answer, '"Pop": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Punk = as.numeric(str_extract(str_extract(str_extract(answer, '"Punk": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Rap_hip_hop = as.numeric(str_extract(str_extract(str_extract(answer, '"Rap/hip-hop": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Reggae = as.numeric(str_extract(str_extract(str_extract(answer, '"Reggae": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Religious = as.numeric(str_extract(str_extract(str_extract(answer, '"Religious": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Rock = as.numeric(str_extract(str_extract(str_extract(answer, '"Rock": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Soul_R_B = as.numeric(str_extract(str_extract(str_extract(answer, '"Soul/R&B": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Soundtracks_theme_song = as.numeric(str_extract(str_extract(str_extract(answer, '"Soundtracks/theme song": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
select(participant_id, Alternative, Bluegrass, Blues, Classical, Country, Dance_Electronica, Folk, Funk, Gospel, Heavy_Metal, World, Jazz, New_Age, Oldies, Opera, Pop, Punk, Rap_hip_hop, Reggae, Religious, Rock, Soul_R_B, Soundtracks_theme_song)
data_combined = merge(x = data_combined, y = stompr_data, by = "participant_id", all = TRUE)
DFS_data = response_data_clean %>%
filter(str_detect(question, 'DFS')) %>%
mutate(Challenge_skill1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Loss_of_self1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Loss_of_self1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience1 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience1": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Challenge_skill2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience2 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience2": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Challenge_skill3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience3 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience3": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Challenge_skill4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Challenge_skill4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Action_awareness4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Action_awareness4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Clear_goals4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Clear_goals4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Unambiguous_feedback4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Unambiguous_feedback4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Task_concentration4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Task_concentration4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Sense_of_control4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Sense_of_control4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Transformation_of_time4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Transformation_of_time4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
mutate(Autotelic_experience4 = as.numeric(str_extract(str_extract(str_extract(answer, '"Autotelic_experience4": "[0-9]'), ': "[0-9]'), '[0-9]'))) %>%
group_by(participant_id) %>%
mutate(Challenge_skill = mean(c(Challenge_skill1, Challenge_skill2, Challenge_skill3, Challenge_skill4))) %>%
mutate(Action_awareness = mean(c(Action_awareness1, Action_awareness2, Action_awareness3, Action_awareness4))) %>%
mutate(Clear_goals = mean(c(Clear_goals1, Clear_goals2, Clear_goals3, Clear_goals4))) %>%
mutate(Unambiguous_feedback = mean(c(Unambiguous_feedback1, Unambiguous_feedback2, Unambiguous_feedback3, Unambiguous_feedback4))) %>%
mutate(Task_concentration = mean(c(Task_concentration1, Task_concentration2, Task_concentration3, Task_concentration4))) %>%
mutate(Sense_of_control = mean(c(Sense_of_control1, Sense_of_control2, Sense_of_control3, Sense_of_control4))) %>%
mutate(Transformation_of_time = mean(c(Transformation_of_time1, Transformation_of_time2, Transformation_of_time3, Transformation_of_time4))) %>%
mutate(Autotelic_experience = mean(c(Autotelic_experience1, Autotelic_experience2, Autotelic_experience3, Autotelic_experience4))) %>%
mutate(DFS_all_score = mean(c(Challenge_skill, Action_awareness, Clear_goals, Unambiguous_feedback, Task_concentration, Sense_of_control, Transformation_of_time, Autotelic_experience))) %>%
select(participant_id, Challenge_skill, Action_awareness, Clear_goals, Unambiguous_feedback, Task_concentration, Sense_of_control, Transformation_of_time, Autotelic_experience, DFS_all_score)
data_combined = merge(x = data_combined, y = DFS_data, by = "participant_id", all = TRUE)
data_combined
write.csv(data_combined, "~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/data_clean.csv")
write.csv(data_combined, "~/Documents/github/2023-static-audio/data/mel_pref1/data_clean.csv")
# data_clean.csv dataframe saved in prepare-data.R
data_clean = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/data_clean.csv")
data_clean
View(data_clean)
100 * 40
80 * 40
hist(data_clean$gmsi_score)
hist(data_clean$extraversion)
hist(data_clean$openness)
hist(data_clean$extraversion)
hist(data_clean$neuroticism)
str(data_clean$neuroticism)
data_clean$neuroticism
hist(data_clean$Action_awareness)
hist(data_clean$Clear_goals)
hist(data_clean$Unambiguous_feedback)
hist(data_clean$World)
cor.test(data_clean$World, data_clean$gmsi_score)
ggplot(data_clean, aes(x=World, y=gmsi_score)) +
geom_point(size=2, shape=23)
ggplot(data_clean, aes(x=World, y=gmsi_score)) +
geom_point(size=2, shape=23) +
geom_smooth()
ggplot(data_clean, aes(x=World, y=gmsi_score)) +
geom_point()+
geom_smooth()
ggplot(data_clean, aes(x=World, y=gmsi_score)) +
geom_point()+
geom_smooth(method=lm)
cor.test(data_clean$World, data_clean$gmsi_score)
0.2006024 *0.2006024
ggplot(data_clean, aes(x=extraversion, y=gmsi_score)) +
geom_point()+
geom_smooth(method=lm)
cor.test(data_clean$World, data_clean$extraversion)
cor.test(data_clean$World, data_clean$openness)
ggplot(data_clean, aes(x=openness, y=gmsi_score)) +
geom_point()+
geom_smooth(method=lm)
ggplot(data_clean, aes(x=openness, y=world)) +
geom_point()+
geom_smooth(method=lm)
ggplot(data_clean, aes(x=openness, y=World)) +
geom_point()+
geom_smooth(method=lm)
## EXPLORE MUSIC RATINGS
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
## EXPLORE MUSIC RATINGS
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=factor(audio_name))) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
data_clean$audio_name = factor(data_clean$audio_name)
## EXPLORE MUSIC RATINGS
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
data_clean
model1 = lm(data_clean ~ gmsi_score + openness + World, data = data_clean)
data_clean
model1 = lm(z_answer ~ gmsi_score + openness + World, data = data_clean)
summai.lm(model1)
summary.lm(model1)
data_clean
model1 = lm(answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
model1 = lm(z_answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
data_clean
model1 = lm(z_answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
model1 = lm(answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
0.08912 *100
?lmer()
librayr(lmer)
library(lmer)
library(lme4)
model1 = lmer(answer ~ gmsi_score + openness + World, data = data_clean)
?lmer()
data_clean
model1.mixed = lmer(answer ~ gmsi_score + openness + World +
(1 | participant_id), data = data_clean)
summary.lm(model1.mixed)
model1.mixed
summary(model1.mixed)
Anova(model1, model1.mixed)
summary.lm(model1.mixed)
library(lmtest)
summary.lm(model1.mixed)
summary(model1.mixed)
library(lmerTest)
library(lmeTest)
install.packages("lmerTest")
library(lmerTest)
model1.mixed = lmer(answer ~ gmsi_score + openness + World +
(1 | participant_id), data = data_clean)
summary(model1.mixed)
summary.lm(model1.mixed)
summary(model1.mixed)
data_clean
################################################################################
# what is the role of indiviudal differences on musi preferences?
################################################################################
## Linear models
model1 = lm(answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
library(lme4)
library(lmerTest)
model1.mixed = lmer(answer ~ gmsi_score + openness + World +
(1 | participant_id), data = data_clean)
summary(model1.mixed)
Anova(model1, model1.mixed)
anova(model1, model1.mixed)
library(car)
anova(model1, model1.mixed)
model1
################################################################################
# what is the role of indiviudal differences on musi preferences?
################################################################################
## Linear models
model1 = lm(answer ~ gmsi_score + openness + World, data = data_clean)
summary.lm(model1)
model1.mixed = lmer(answer ~ gmsi_score + openness + World +
(1 | participant_id), data = data_clean)
summary(model1.mixed)
anova(model1, model1.mixed)
model1.mixed
## CLUSTERING
library(ggrepel) # avoid overlapping labels in plot
library(factoextra) # cluster analysis
library(ggfortify) # plot PCAs
library(plotly) # plot 3D PCAs
data_clean
data_clean
data_to_clust = data_clean %>%  select(-definition, -answer, -gender) %>%
drop_na()# %>%
data_to_clust
data_to_clust
data_to_clust[,-1:-2]
data_to_clust[,c(2, 3, 11, 52)]
data_clean
data_clean %>%  select(-definition, -answer, -gender)
data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na()
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(names_from = "audio_name", values_from = "z_answer") - no longer needed
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(names_from = "audio_name", values_from = "z_answer") - no longer needed
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(names_from = "audio_name", values_from = "z_answer")
data_to_clust
View(data_to_clust)
data_clean %>%  select(participant_id, audio_name, z_answer)
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(participant_id, names_from = "audio_name", values_from = "z_answer")
?pivot_wider()
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(id_cols = participant_id, names_from = "audio_name", values_from = "z_answer")
data_to_clust
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(id_cols = participant_id, names_from = "audio_name", values_from = "z_answer")
data_clean
data_to_clust
data_clean
ratings_data
ratings_data$is_repeat_trial
# we want to convert the data to wide format with rows as particaiptns and columns as songs
data_to_clust = data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na() %>%
pivot_wider(id_cols = participant_id, names_from = "audio_name", values_from = "z_answer")
data_to_clust
data_clean %>%  select(participant_id, audio_name, z_answer) %>%
drop_na()
# we want to convert the data to wide format with rows as particaiptns and columns as songs
data_clean %>%  select(participant_id, audio_name, z_answer) %>%
group_by(audio_name) %>%
summarise(n= n())
# we want to convert the data to wide format with rows as particaiptns and columns as songs
data_clean %>%  select(participant_id, audio_name, z_answer) %>%
group_by(participant_id) %>%
summarise(n= n())
data_clean = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/RatingTrial.csv")
data_clean
ratings_data = read_csv("~/Documents/github/2023-static-audio/data/mel_pref1/anonymous/data/RatingTrial.csv")
data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(data_clean$participant_id)) # 80
# N stimuli
length(table(data_clean$audio_name)) # 40
# N participants
length(table(data_clean$participant_id)) # 80
# N stimuli
length(table(data_clean$audio_name)) # 40
data_clean$audio_name = factor(data_clean$audio_name)
## EXPLORE MUSIC RATINGS
ggplot(data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
################################################################################
# what is the role of indiviudal differences on musi preferences?
################################################################################
## Linear models
model1 = lm(answer ~ gmsi_score + openness + World, data = data_clean)
# we want to convert the data to wide format with rows as particaiptns and columns as songs
data_to_clust = ratings_data_clean %>%  select(-definition, -answer) %>%
pivot_wider(names_from = "audio_name", values_from = "z_answer")
data_to_clust
run_pca = function(data, k){
pca_res = prcomp(data[,-1:-2])
sum_pca = summary(pca_res)
elbow = fviz_nbclust(data[,-1:-8], kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
silhouette = fviz_nbclust(data[,-1:-8], kmeans, method = "silhouette")+
labs(subtitle = "Silhouette method")
# Assuming k is the chosen number of clusters
cluster <- kmeans(data[,-1:-8], k)
data$cluster <- as.factor(cluster$cluster)
plot_2D_pca = autoplot(pca_res,  data = data, colour = 'cluster', size = 1) +
geom_text_repel(aes(label = participant_id),
box.padding = 0.5,
point.padding = 0.5,
segment.color = 'grey',
size = 2.5) +
theme(axis.text.x = element_text(size=6),
axis.text.y=element_text(size=8),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "right",
legend.text = element_text(size=10),
legend.title = element_blank()) +
# ggtitle("World Survey Data Space") +
theme_classic()
return(list(
pca_res=pca_res,
sum_pca=sum_pca,
elbow=elbow,
silhouette=silhouette,
plot_2D_pca=plot_2D_pca,
data=data))
}
data_to_clust
x = run_pca(data_to_clust, 4)
x$pca_res
x$sum_pca
x$elbow
x$silhouette
x$plot_2D_pca
x$plot_2D_pca
# Perform hierarchical clustering
hc_res <- hclust(dist(data_to_clust[,-1:-2]))
# Determine the number of clusters (k)
k = 3  # You can change this based on your desired number of clusters
# Cut the hierarchical clustering tree into k clusters
clusters <- cutree(hc_res, k = k)
# Add cluster assignments as a new column to the dataset
data_to_clust$cluster <- clusters
# Plot dendrogram
plot(hc_res, hang = -1, cex = 0.6,
main = "Dendrogram - Hierarchical Clustering", xlab = "Cities", sub = "",
labels = data_to_clust$participant_id)
# Add clusters to the dendrogram
cluster_colors <- c("red", "blue", "green", "purple", "orange", "brown")
rect.hclust(hc_res, k = k, border = cluster_colors[1:k])
data_to_clust[,-1:-2]
dist(data_to_clust[,-1:-2])
# Perform hierarchical clustering
hc_res <- hclust(dist(data_to_clust[,-1:-2]))
#still need to remove data for plot
data_combined = tibble(data_to_clust[,c(2, 3, 11, 52)]) %>% drop_na() #participant_id, age, gmsi_score, cluster
data_combined
data_combined %>%
group_by(cluster) %>%
summarise(n = n(),
mean_gold = mean(gmsi_score, na.rm = T),
sd_gold = sd(gmsi_score, na.rm = T),
mean_age = mean(age, na.rm = T),
sd_age = mean(age, na.rm = T))
cluster_colors
data_to_clust
data_to_clust %>%
group_by(cluster) %>%
summarise(n = n())
data_to_clust

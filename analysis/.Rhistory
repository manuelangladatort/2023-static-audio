library(tidyverse)
ratings_data = read_csv("~/Documents/github/2023-static-audio/data/anonymous/data/RatingTrial.csv")
ratings_data
ratings_data %>% select(complete:score)
ratings_data %>% select(complete:answer)
ratings_data %>% select(complete:is_repeat_trial, answer)
ratings_data %>%
filter(complete == "True") %>%  # only select particiapnts who finished
select(complete:is_repeat_trial, answer)
ratings_data %>%
filter(complete == "TRUE") %>%  # only select particiapnts who finished
select(complete:is_repeat_trial, answer)
ratings_data %>%
filter(complete == "TRUE") %>%  # only select particiapnts who finished
filter(is_repeat_trial == "FALSE") %>%  # only select non-repeated trials
select(participant_id, definition, answer)
x = ratings_data %>%
filter(complete == "TRUE") %>%  # only select particiapnts who finished
filter(is_repeat_trial == "FALSE") %>%  # only select non-repeated trials
select(participant_id, definition, answer)
table(x$participant_id)
ratings_data
x = ratings_data %>%
filter(failed == "FALSE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # only select non-repeated trials
select(participant_id, definition, answer) %>%
# count number trials per
group_by(participant_id) %>%
mutate(n_pid = n())
table(x$participant_id)
ratings_data
ratings_data %>%
filter(failed == "FALSE")
x = ratings_data %>%
filter(finalized == "TRUE") %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # only select non-repeated trials
select(participant_id, definition, answer) %>%
# count number trials per
group_by(participant_id) %>%
mutate(n_pid = n())
table(x$participant_id)
x = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # only select non-repeated trials
select(participant_id, definition, answer) %>%
# count number trials per
group_by(participant_id) %>%
mutate(n_pid = n())
table(x$participant_id)
ratings_data %>%
filter(failed == FALSE)
ratings_data
ratings_data %>%
filter(failed == FALSE)
x = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # only select non-repeated trials
select(participant_id, definition, answer) %>%
# count number trials per
group_by(participant_id) %>%
mutate(n_pid = n())
table(x$participant_id)
ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_pid = n())
x = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings < 40)
table(x$participant_id)
x = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings > 40)
table(x$participant_id)
x = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings = 40)
table(x$participant_id)
ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n())
ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings => 40)
ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
x = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
table(x$participant_id)
length(table(x$participant_id))
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
length(table(ratings_data_clean$participant_id))
ratings_data_clean
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_anser = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# total number of valid participants
length(table(ratings_data_clean$participant_id))
# plot
ratings_data_clean
ratings_data
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, response_id, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_anser = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# total number of valid participants
length(table(ratings_data_clean$participant_id))
# plot
ratings_data_clean
# N stimuli
length(table(ratings_data_clean$response_id))
# N stimuli
length(table(ratings_data_clean$response_id)) / length(table(ratings_data_clean$participant_id))
ratings_data_clean
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean_rating = mean(z_anser), sd_rating = sd(z_anser))
View(ratings_data_clean)
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean_rating = mean(answer), sd_rating = sd(answer))
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, response_id, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_anser = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$response_id)) / length(table(ratings_data_clean$participant_id))
ratings_data_clean
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, response_id, answer) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean_rating = mean(z_answer), sd_rating = sd(z_answer))
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean_rating = mean(z_answer), sd_rating = sd(z_answer, rm.na = TRUE))
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean_rating = mean(z_answer), sd_rating = sd(z_answer))
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean = mean(answer), mean.z = mean(z_answer), sd = sd(answer))
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean = mean(answer), mean.z = mean(z_answer), sd = se(answer))
# plot
ratings_data_clean %>%
group_by(response_id) %>%
summarise(n = n(), mean = mean(answer), mean.z = mean(z_answer), sd = sd(answer))
ratings_data
ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer)
View(ratings_data)
ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.numeric(str_extract(audio_name, "\\d+"))
)
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(ratings_data_clean$participant_id))
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.numeric(str_extract(audio_name, "\\d+"))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$response_id)) / length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$audio_name))
ratings_data_clean
# plot
ratings_data_clean %>%
group_by(audio_name) %>%
summarise(n = n(), mean = mean(answer), mean.z = mean(z_answer), sd = sd(answer))
# plot
ratings_data_clean %>%
group_by(audio_name) %>%
summarise(n = n(), mean = mean(z_answer), sd = sd(z_answer))
ratings_data_clean
ratings_data_clean %>%
ggplot(aes(x = audio_name, y = z_answer)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_text(aes(label = round(ratings, 2)), vjust = -0.5) +  # Add text labels with rounded mean values
labs(title = "Mean Ratings of 10 Stimuli", x = "Stimuli", y = "Mean Rating") +
theme_minimal()
ratings_data_clean %>%
ggplot(reorder(audio_name, z_answer), z_answer) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_text(aes(label = round(ratings, 2)), vjust = -0.5) +  # Add text labels with rounded mean values
labs(title = "Mean Ratings of 10 Stimuli", x = "Stimuli", y = "Mean Rating") +
theme_minimal()
ratings_data_clean
ratings_data_clean %>%
ggplot(reorder(audio_name, z_answer), z_answer) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Mean Ratings of 10 Stimuli", x = "Stimuli", y = "Mean Rating") +
theme_minimal()
ratings_data_clean %>%
ggplot(reorder(audio_name, z_answer), z_answer)
ratings_data_clean
ratings_data_clean %>%
ggplot(x = reorder(audio_name, z_answer), y = z_answer) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Mean Ratings of 10 Stimuli", x = "Stimuli", y = "Mean Rating") +
theme_minimal()
ratings_data_clean %>%
ggplot(x = reorder(audio_name, z_answer), y = z_answer) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
theme_minimal()
# plot
ratings_data_clean %>%
group_by(audio_name) %>%
summarise(n = n(), mean = mean(z_answer), sd = sd(z_answer)) %>%
ggplot(x = reorder(audio_name, mean), y = mean) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
theme_minimal()
ggplot(ratings_data_clean, aes(x=audio_name, y=z_answer, color=audio_name)) +
geom_boxplot()
ratings_data_clean = ratings_data %>%
filter(failed == FALSE) %>%  # filter out participants who failed
filter(is_repeat_trial == "FALSE") %>%  # filter out repeated trials
select(participant_id, definition, audio_name, answer) %>%
# extract audio name
mutate(audio_name = as.factor(as.numeric(str_extract(audio_name, "\\d+")))) %>%
# count number trials per participant
group_by(participant_id) %>%
mutate(n_ratings = n()) %>%
# z-score ratings per particiapnt
mutate(z_answer = scale(answer)) %>%
# exclude participants with less than <40 trials
filter(n_ratings >= 40)
# N participants
length(table(ratings_data_clean$participant_id))
# N stimuli
length(table(ratings_data_clean$audio_name))
ggplot(ratings_data_clean, aes(x=audio_name, y=z_answer, color=audio_name)) +
geom_boxplot()
ggplot(ratings_data_clean, aes(x=audio_name, y=z_answer, color=audio_name)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none")
ggplot(ratings_data_clean, aes(x=audio_name, y=z_answer, color=audio_name)) +
geom_boxplot() +
theme_classic() +
theme(legend.position = "none")
ggplot(ratings_data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
theme_classic() +
theme(legend.position = "none")
ggplot(ratings_data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_jitter(shape=16, position=position_jitter(0.2)) +
geom_boxplot() +
theme_classic() +
theme(legend.position = "none")
ggplot(ratings_data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_classic() +
theme(legend.position = "none")
theme_classic() +
theme(legend.position = "none")
ggplot(ratings_data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- score)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
ggplot(ratings_data_clean, aes(reorder(audio_name, z_answer), z_answer, color=audio_name)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab("Liking rating (z- scored)") +
xlab("stimuli") +
theme_classic() +
theme(legend.position = "none")
ggsave("song_ratings.png", height = "5", width = "10", units = "cm")
?ggsave()
ggsave("song_ratings.png", height = 5, width = 10, units = "cm")
ggsave("song_ratings.png", height = 10, width = 20, units = "cm")
